<templateSet group="Kotlin">
  <template name="provide" value="@Provides&#10;@Singleton&#10;fun provide$NAME$Manager(manager: $NAME$ManagerImpl): $NAME$Manager = manager" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="repo" value="&#10;import co.bird.db.DatabaseManager&#10;import co.bird.model.onboarding.ContractorOnboardEvent&#10;import co.bird.skate.Database&#10;import co.bird.skate.and&#10;import co.bird.skate.eq&#10;import co.bird.skate.execute&#10;import co.bird.skate.generate&#10;import co.bird.skate.insert&#10;import co.bird.skate.isNull&#10;import co.bird.skate.query&#10;import co.bird.skate.queryFirst&#10;import co.bird.skate.returningAll&#10;import co.bird.skate.selectAll&#10;import co.bird.skate.to&#10;import co.bird.skate.update&#10;import co.bird.skate.values&#10;import co.bird.skate.where&#10;import co.bird.util.now&#10;import java.time.OffsetDateTime&#10;import java.util.UUID&#10;import javax.inject.Inject&#10;&#10;interface $NAME$Repository {&#10;  fun insert($MODEL_NAME$: $MODEL_CLASS$): $MODEL_CLASS$&#10;  fun byId(id: UUID): $MODEL_CLASS$?&#10;  fun delete(id: UUID, deletedAt: OffsetDateTime = now()): $MODEL_CLASS$?&#10;}&#10;&#10;class $NAME$RepositoryImpl @Inject constructor(&#10;  private val db: DatabaseManager&#10;) : $NAME$Repository {&#10;&#10;  override fun insert($MODEL_NAME$: $MODEL_CLASS$): $MODEL_CLASS$ {&#10;    $MODEL_CLASS$::class&#10;      .insert()&#10;      .values($MODEL_NAME$)&#10;      .generate(db.dialect)&#10;      .execute(db, database = Database.PRIMARY)&#10;    return $MODEL_NAME$&#10;  }&#10;&#10;  override fun byId(id: UUID): $MODEL_CLASS$? {&#10;    return $MODEL_CLASS$::class&#10;      .selectAll()&#10;      .where(&#10;        and(&#10;          $MODEL_CLASS$::deletedAt.isNull(),&#10;          $MODEL_CLASS$::id eq id&#10;        )&#10;      )&#10;      .generate(db.dialect)&#10;      .queryFirst(db, database = Database.REPLICA)&#10;  }&#10;&#10;  override fun delete(id: UUID, deletedAt: OffsetDateTime): $MODEL_CLASS$? {&#10;    return $MODEL_CLASS$::class&#10;      .update($MODEL_CLASS$::deletedAt to deletedAt)&#10;      .where($MODEL_CLASS$::id eq id)&#10;      .returningAll()&#10;      .generate(db.dialect)&#10;      .queryFirst(db, database = Database.PRIMARY)&#10;  }&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODEL_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODEL_CLASS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
</templateSet>